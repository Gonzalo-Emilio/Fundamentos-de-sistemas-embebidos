Código Arduino 

//autores: 
//Palacios Flores Gonzalo Emilio
//Camacho de la O Gerardo
//García Ramírez Ángel Daniel

#include <PubSubClient.h>
#include <ESP8266WiFi.h>
#include <NTPClient.h>
#include <WiFiUdp.h>
#include <TimeLib.h>
#include <Servo.h>
#include <Wire.h>
#include <Time.h>

//------------ Variables de suscripcion --------------------
WiFiClient espClient;
PubSubClient client(espClient);
long lastMsg = 0;
char msg[50];
int value = 0;
//----------- Foco Encendido y apagado y timer --------------------
const int ledPin1 = 2;
String horaEnc;
String horaApa;
String horaAte;
String horaAte2;
//------------ Atenuación de foco ---------------------------
const int ledPin4 = 16;
const int ledPin2 = 13;
const int ledPin3 = 15;
//------------ Puerta de garage --------------------
Servo servo; 
const int door = 1 ;
//------------ Timbre --------------------------
char charPulsador [15];
String strPulsador;
String strPulsadorUltimo;
char PULSADOR[50];
char valueStr[15];
//------------ conexion con wifi -------------
const char* ssid = "IZZI-D0F7";
const char* password = "9CC8FC7AD0F7";
const char* mqtt_server = "192.168.0.18";
//------------ Configuración de la hora --------
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP,"0.debian.pool.ntp.org",-21600,6000);
//------------ funcion setup ----------------
//configuración del dispositivo y conexion con servidor 
void setup() {
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  //inicialización de focos
  pinMode(ledPin1, OUTPUT);
  pinMode(ledPin2, OUTPUT);
  pinMode(ledPin3, OUTPUT);

  // Entradas
  pinMode(14, INPUT); // D5

  //inicialización de puerta con el puerto 14
  servo.attach(door);
  servo.write(0); 
  timeClient.begin(); 
}
//------------- funcion setup_wifi ------------------
//visualizar si se relizo la comunicacion con la raspberry pi
 void setup_wifi() {
    delay(10);
    // We start by connecting to a WiFi network
    Serial.println();
    Serial.print("Conectando a ");
    Serial.println(ssid);
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
      delay(500);
      Serial.print(".");
    }
    Serial.println("");
    Serial.println("WiFi conectado");
    Serial.println("IP address: ");
    Serial.println(WiFi.localIP());
  }

//----------Funcion Callback-------------------
//funcion para entender los topics de la raspberry pi mediante mqtt
void callback(char* topic, byte* payload, unsigned int length) {
    String PAYLOAD;
    Serial.print("Mensaje Recibido en el topic [");
    Serial.print(topic);
    Serial.print("] ");
    Serial.print("Mensaje: ");
    for (int i = 0; i < length; i++) {
      Serial.print((char)payload[i]);
      PAYLOAD += (char)payload[i];
    }
    Serial.println();

//-------------- Primer foco ----------------------
  if(String(topic) == "casa/FocoEncApa"){
    Serial.print("Estado del foco: ");
    if(PAYLOAD == "ON"){
      Serial.println("ON");
      digitalWrite(ledPin1, HIGH);
    }else if(PAYLOAD == "OFF"){
      Serial.println("OFF");
      digitalWrite(ledPin1, LOW);
    }
  }

//--------------- Modulación --------------------   

  if(String(topic) == "casa/VarFoco"){
    Serial.print("Cambio del foco ");
    Serial.println("PAYLOAD");
    analogWrite(ledPin4, PAYLOAD.toInt());
  }
//--------------- Puerta ------------------------
  if(String(topic) == "casa/Puerta"){
    if(PAYLOAD == "PA"){
      Serial.println("Puerta Abierta");
      servo.write(0);
    }else if (PAYLOAD == "PC"){
      Serial.println("Puerta Cerrada");
      servo.write(180);
    }
  }
//--------------- Timer -------------------------
  if(String(topic) == "casa/AutEnc"){
    horaEnc = String(PAYLOAD); 
  }   
  if(String(topic) == "casa/AutApa"){
    horaApa = String(PAYLOAD);
  }
  if(String(topic) == "casa/AutAte"){
    horaAte = String(PAYLOAD);
  }
  if(String(topic) == "casa/AutAte2"){
    horaAte2 = String(PAYLOAD);
  }
} 


//--------------- Busqueda de conexion mqtt --------------
void reconnect(){
  while(!client.connected()){
    Serial.print("Realizando conexion MQTT");
    if(client.connect("ESP8266Client")){
      Serial.println("conectado");
      client.subscribe("casa/FocoEncApa"); //conexion con el primer topic
      client.subscribe("casa/VarFoco");    //conexion con el segundo topic
      client.subscribe("casa/Puerta");     //conexion con el tercer topic
      client.subscribe("casa/Timbre");     //conexion con el cuarto topic 
      client.subscribe("casa/AutEnc");     //conexion con el quinto topic
      client.subscribe("casa/AutApa");     //conexion con el sexto topic
      client.subscribe("casa/AutAte");     //conexion con el septimo topic 
      
    }else{
      Serial.print("Fallo, rc=");
      Serial.print(client.state()); 
      Serial.println("Validación de conexion en 5s");
      delay(5000);
    }
  }
}
//---------------- Publicador -------------------
void loop() {
  timeClient.update();
  Serial.println(timeClient.getFormattedTime());
  digitalWrite(ledPin2, HIGH);
  digitalWrite(ledPin3, LOW);
  if(!client.connected()){
    reconnect();
  }
  client.loop();

  long now = millis();
  if(now - lastMsg > 1000){ //definición del tiempo de muestreo
    lastMsg = now;
    ++value;
    snprintf (msg, 75, "Conexión exitosa #%ld", value);
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("casa/#", msg); //publica desde la terminal  
  }
  //------------------------------------------------------------
 
  if (digitalRead(14) == 0) {
    strPulsador = "Tocan Timbre";
   } else {
    strPulsador = "Esperan";
   }

   if (strPulsador != strPulsadorUltimo) { //envia el estado del pulsador solamente cuando cambia.
    strPulsadorUltimo = strPulsador;
    strPulsador.toCharArray(valueStr, 15);
    Serial.println("Enviando: [casa/Timbre] " + strPulsador);
    client.publish("casa/Timbre", valueStr);
    client.publish("casa/#", msg);
   }
  //-------------------------------------------------------------------
  if(timeClient.getFormattedTime()== horaEnc){
    digitalWrite(ledPin1, HIGH);
    analogWrite(ledPin4, 255);  
  }else if(timeClient.getFormattedTime()== horaApa){
    digitalWrite(ledPin1, LOW);
    analogWrite(ledPin4, 0 );
  }else if(timeClient.getFormattedTime()== horaAte){ //Programación de la hora de atenuado de luces en un 15%
    analogWrite(ledPin4, 38);  
  }else if(timeClient.getFormattedTime()== "20:20:00"){ //Apagado de luces a las 12 de la noche "00:00:00" 
    analogWrite(ledPin4, 0); 
  }
}
 
 





